---
title: "Reinforcement Learning"
format: html
editor: visual
---

# Reinforcement learning on SingleCell task

### The simplest model:

$V_{t+1} = V_t + \alpha PE$ ,

with $PE = R_t-V_t$ ,

with $V_t$ perceived value at the time $t$ and $R_t$ the feedback 1 for win 0 for loosing. <br><br> *Here the value of* $V_t$ is personal for an oponent that means we will have to run independant RL model for each oponent. We might think of some dependencies later. Exemple : when I update the value of one oponent does it affects the values of the other oponents.

```{r}
RL <- function(V, R, alpha = .2){
  return (V+alpha*(R-V))
}
```

## Real data:

Now I will import data from *pat_02495_0949*:

The treatment will be done in R for this time.

```{r}
pat_files = list.files(path="TrialbyTrial/",pattern = "PostSpikes")
pat = read.table(file=paste0("TrialbyTrial/",pat_files[1]),sep=",",header=T)

print(paste0("Patient: ",pat_files[1]," did ",dim(pat)[1], " trials which correspond to ",dim(pat)[1]/45," blocks."))#Sanity check this should be an integer

pat$Trial = ifelse(pat$Trial>45,pat$Trial-45,pat$Trial) #Correction of data collection 
```

This patient did 6 blocks let's run 6 RL models ($V_{t+1} = V_t + \alpha (R_t-V_t)$):

```{r}
V_init = 0.5
V = matrix(NA,45,dim(pat)[1]/45)
conditions = matrix(NA,2,dim(pat)[1]/45)

for (i in 1:(dim(pat)[1]/45)){
  v = V_init
  sub = pat[((i-1)*45+1):((i-1)*45+45),]
  R = sub$WinLose
  for(t in 1:45){
    v = RL(v,R[t],0.2)
    V[t,i] = v 
  }
  #Here it should be only one everytime but as sanity check I'll put unique()
  conditions[1,i] = unique(sub$WinProb)
  conditions[2,i] = unique(sub$Condition)
}

V = rbind(rep(V_init,dim(pat)[1]/45),V)
```

Graphical representation of these 6 RL

```{r}
colours = c("#1f77b4","#ff7f0e","#2ca02c")
cond = ifelse(conditions[1,]=="low",1,ifelse(conditions[1,]=="med",2,3))

plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL demonstration",ylab = "Oponent Value",xlab="Trials")

for (i in 1:ncol(V)) {
  lines(0:45, V[, i],col = colours[cond[i]],lwd=3)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
```

By averaging on conditions:

```{r}
plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL demonstration",ylab = "Oponent Value",xlab="Trials")

cond = levels(as.factor(conditions[1,]))[c(2,3,1)]#To obtain Low Med High
for (i in 1:length(cond)){
  y = rowMeans(V[,which(conditions[1,]==cond[i])])
  lines(0:45,y ,col = colours[i],lwd=3)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
```

```{r}
plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL demonstration",ylab = "Oponent Strength",xlab="Trials")

cond = levels(as.factor(conditions[1,]))[c(2,3,1)]#To obtain Low Med High
for (i in 1:length(cond)){
  y = rowMeans(V[,which(conditions[1,]==cond[i])])
  lines(0:45,1-y ,col = colours[i],lwd=3)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
```

## For every participant

```{r}
pat_files = list.files(path="TrialbyTrial/",pattern="PostSpikes")#Files of all participants only for the activation pÃ´st stim

V_stack = NULL;PE_stack = NULL;

for (p in 1:length(pat_files)){
  #Read data
  pat = read.table(file=paste0("TrialbyTrial/",pat_files[p]),sep=",",header=T)
  pat_name = paste(strsplit(pat_files[p],split = "_")[[1]][2:4],collapse = "_")
  print(paste0("Processing patient: ",pat_name," did ",dim(pat)[1], " trials which correspond to ",dim(pat)[1]/45," blocks...."))#Sanity check this should be an integer
  if ((dim(pat)[1]/45)%%1!=0){
    print("Skipped error in data")
  }else{
    
    pat$Trial = ifelse(pat$Trial>45,pat$Trial-45,pat$Trial) #Correction of data collection 
    
    
    #Simulation RL 
    V_init = 0.5
    V = matrix(NA,dim(pat)[1]/45,45)
    PE = matrix(NA,dim(pat)[1]/45,45)
    conditions = matrix(NA,dim(pat)[1]/45,2)
    
    for (i in 1:(dim(pat)[1]/45)){
      v = V_init
      sub = pat[((i-1)*45+1):((i-1)*45+45),]
      R = sub$WinLose
      for(t in 1:45){
        v = RL(v,R[t],0.2)
        PE[i,t] = R[t]-v
        V[i,t] = v
        
      }
      #Here it should be only one everytime but as sanity check I'll put unique() (it will bug if there is more than one item)
      conditions[i,1] = unique(sub$WinProb)
      conditions[i,2] = unique(sub$Condition)
    }
    
    V = cbind(rep(pat_name,dim(conditions)[1]),conditions,rep(V_init,dim(pat)[1]/45),V)
    PE = cbind(rep(pat_name,dim(conditions)[1]),conditions,rep(NA,dim(pat)[1]/45),PE)
    
    V_stack = rbind(V_stack,V)
    PE_stack = rbind(PE_stack,PE)
  }
}

V_stack = as.data.frame(V_stack)




```

```{r}

plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL simulation",ylab = "Oponent Value (averaged)",xlab="Trials")

cond = levels(as.factor(conditions[,1]))[c(2,3,1)]#To obtain Low Med High
for (i in 1:length(cond)){
  sub = subset(V_stack[,4:dim(V_stack)[2]],V_stack[,2]==cond[i])
  #print(paste("Condition:",cond[i],dim(sub)[1],"rows."))
  
  #To ensure that everything is numeric
  sub1 <- as.data.frame(sub)
  sub1[] <- lapply(sub1, as.numeric)
  y = colMeans(sub1) 
  
  lines(0:45,y ,col = colours[i],lwd=3)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
```

Toutes les conditions:

```{r}

plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL simulation",ylab = "Oponent Strength (averaged)",xlab="Trials")

cond = levels(as.factor(conditions[,1]))[c(2,3,1)]#To obtain Low Med High
for (i in 1:length(cond)){
  sub = subset(V_stack[,4:dim(V_stack)[2]],V_stack[,2]==cond[i])
  #print(paste("Condition:",cond[i],dim(sub)[1],"rows."))
  
  #To ensure that everything is numeric
  sub1 <- as.data.frame(sub)
  sub1[] <- lapply(sub1, as.numeric)
  y = colMeans(sub1) 
  
  lines(0:45,1-y ,col = colours[i],lwd=3)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
```

Seulement les socials:

```{r}
plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL simulation (Social Data)",ylab = "Oponent Strength (averaged)",xlab="Trials")

cond = levels(as.factor(conditions[,1]))[c(2,3,1)]#To obtain Low Med High
for (i in 1:length(cond)){
  sub = subset(V_stack[,4:dim(V_stack)[2]],V_stack[,2]==cond[i] & V_stack[,3]=='Social')
  #print(paste("Condition:",cond[i],dim(sub)[1],"rows."))
  
  #To ensure that everything is numeric
  sub1 <- as.data.frame(sub)
  sub1[] <- lapply(sub1, as.numeric)
  y = colMeans(sub1) 
  
  lines(0:45,1-y ,col = colours[i],lwd=3)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
```

Seulement pour les non-social

```{r}
plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL simulation (Social Data)",ylab = "Oponent Strength (averaged)",xlab="Trials")

cond = levels(as.factor(conditions[,1]))[c(2,3,1)]#To obtain Low Med High
for (i in 1:length(cond)){
  sub = subset(V_stack[,4:dim(V_stack)[2]],V_stack[,2]==cond[i] & V_stack[,3]=='NonSocial')
  #print(paste("Condition:",cond[i],dim(sub)[1],"rows."))
  
  #To ensure that everything is numeric
  sub1 <- as.data.frame(sub)
  sub1[] <- lapply(sub1, as.numeric)
  y = colMeans(sub1) 
  
  lines(0:45,1-y ,col = colours[i],lwd=3)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
```

## Now let's see if there is a correlation between $PE$ and the number of spikes by trial

### Table management:

```{r}
TAB = NULL
cond = c("low","med","high")
treatment = c("Social","NonSocial")

for (p in 1:length(pat_files)){
  pat = read.table(file=paste0("TrialbyTrial/",pat_files[p]),sep=",",header=T)
  pat_name = paste(strsplit(pat_files[p],split = "_")[[1]][2:4],collapse = "_")
  print(paste0("Processing patient: ",pat_name," did ",dim(pat)[1], " trials which correspond to ",dim(pat)[1]/45," blocks...."))#Sanity check this should be an integer
  if ((dim(pat)[1]/45)%%1!=0){
    print("Skipped error in data")
  }else{
    for (co in 1:length(cond)){
      condi = cond[co]
      for (tr in 1:length(treatment)){
        treat = treatment[tr]
        
        sub = subset(PE_stack,PE_stack[,1]==pat_name & PE_stack[,2]==condi & PE_stack[,3]==treat)
        
        if (dim(sub)[1]>0){
          sub2 = subset(pat,pat$Condition == treat & pat$WinProb == condi)#The order is the same for both table because PE_stack is a child from pat
          for (i in 1:dim(sub)[1]){
            block = sub2[((i-1)*45+1):((i-1)*45+45),] #the i^th block
            PE = as.numeric(sub[i,1:45+4])
            Patient = rep(pat_name,dim(block)[1])
            tab = cbind(Patient,block[,2:dim(block)[2]],PE)
            TAB = rbind(TAB,tab)
          }
        }
      }
    }  
  }
}
print(paste0("Dimension of the big table: ",dim(TAB)[1]," ",dim(TAB)[2],", this represents ",dim(TAB)[1]/45," trials"))

```

## Correlation anlysis

```{r}
Patients = levels(as.factor(TAB$Patient))
abs=T
for (p in Patients){
  print(paste("Patient:",p))
  stab = TAB[TAB$Patient==p,]
  
  #Clean the non relevant neurons 
  tab = stab[,-(which(colSums(stab[,7:(dim(stab)[2]-1)])==0)+6)]
    
  #Build the most complete model
  # predictor_cols <- paste(names(tab)[2:(ncol(tab) - 1)], collapse = " + ")
  # formula <- as.formula(paste("PE ~", predictor_cols))
  # 
  # mod_comp = lm(formula,data=tab) # Be careful you can run this model only if there is at least two treatment, conditions otherwise you cannot apply contrast
  
  #Only take into account the spikes
  predictor_cols <- paste(names(tab)[7:(ncol(tab) - 1)], collapse = " + ")
  if (abs){
    formula <- as.formula(paste("abs(PE) ~", predictor_cols))
    print(formula)
    mod = lm(formula,data=tab)
  }else{
    formula <- as.formula(paste("PE ~", predictor_cols))
    mod = lm(formula,data=tab)
  }
  
  print(summary(mod))
  print("-------------------------------------------------")
  print("")
}
```

## Graphical representation of $PE$

```{r}
alpha = 0.6
colours_a = c(rgb(31/255,119/255,180/255,alpha),rgb(255/255,127/255,14/255,alpha),rgb(44/255,160/255,44/255,alpha))
plot(rep(seq(1,45,1),39),TAB$PE,col=colours_a[ifelse(TAB$WinProb=="low",1,ifelse(TAB$WinProb=="med",2,3))],pch=16,main = "Prediction Error",ylab = "PE",xlab="Trial")
```

```{r}

sub = subset(TAB,TAB$Patient=="pat_02495_0949")
plot(numeric(0), xlim = c(0, 45), ylim = c(-1, 1), main = "PE for pat_02495_0949",ylab = "Prediction Error",xlab="Trials")

for (i in 1:(dim(sub)[1]/45)){
  points(1:45,sub[(1+(i-1)*45):(i*45),58],col=colours_a[ifelse(sub$WinProb[(i*45)]=="low",1,ifelse(sub$WinProb[(i*45)]=="med",2,3))],pch=16)
}
```

```{r}
sub = subset(TAB,TAB$Patient=="pat_02495_0949")
plot(numeric(0), xlim = c(0, 45), ylim = c(-1, 1), main = "PE for pat_02495_0949",ylab = "Prediction Error",xlab="Trials")

for (i in 1:(dim(sub)[1]/45)){
  points(1:45,sub[(1+(i-1)*45):(i*45),58],col=colours_a[ifelse(sub$WinProb[(i*45)]=="low",1,ifelse(sub$WinProb[(i*45)]=="med",2,3))],pch=16)
}
```

```{r}
Vsub = subset(V_stack,V_stack$V1=="pat_02495_0949")

plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "V for pat_02495_0949",ylab = "Prediction Error",xlab="Trials")

for (i in 1:(dim(sub)[1]/45)){
  lines(0:45,Vsub[i,4:49],col=colours[(i+1)%/%2],pch=16,lwd=2)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
```

```{r}
zeros = which(TAB$Post_spikes42==0)
plot(abs(TAB$PE[-zeros])~TAB$Post_spikes42[-zeros],xlab="Spikes post trial",ylab="Prediction Error",main="Neuron 42",pch=16,col = rgb(2,22,69,150,maxColorValue = 255))

mod = lm(abs(TAB$PE[-zeros])~TAB$Post_spikes42[-zeros])
abline(mod,lwd=2,col='red')
```

```{r}
zeros = which(TAB$Post_spikes47==0)
plot(abs(TAB$PE[-zeros])~TAB$Post_spikes42[-zeros],xlab="Spikes post trial",ylab="Prediction Error",main="Neuron 47",pch=16,col = rgb(2,22,69,150,maxColorValue = 255))

mod = lm(abs(TAB$PE[-zeros])~TAB$Post_spikes47[-zeros])
abline(mod,lwd=2,col='red')
```

```{r}
zeros = which(TAB$Post_spikes11==0)
plot(abs(TAB$PE[-zeros])~TAB$Post_spikes11[-zeros],xlab="Spikes post trial",ylab="Prediction Error",main="Neuron 11",pch=16,col = rgb(2,22,69,150,maxColorValue = 255))

mod = lm(abs(TAB$PE[-zeros])~TAB$Post_spikes11[-zeros])
abline(mod,lwd=2,col='red')
```

## Adding ratings of participants

```{r}
ratings = read.csv("Ratings.csv", header=T)


plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL simulation",ylab = "Oponent Strenght (averaged)",xlab="Trials")
  
cond = levels(as.factor(conditions[,1]))[c(2,3,1)]#To obtain Low Med High
cond_float = seq(0.25,0.75,0.25)
for (i in 1:length(cond)){
  sub = subset(V_stack[,4:dim(V_stack)[2]],V_stack[,2]==cond[i])
  #print(paste("Condition:",cond[i],dim(sub)[1],"rows."))
  
  #To ensure that everything is numeric
  sub1 <- as.data.frame(sub)
  sub1[] <- lapply(sub1, as.numeric)
  y = colMeans(sub1) 
  
  se = rep(NA,dim(sub1)[2])
  for (k in 1:dim(sub1)[2]){
    se[k] = sd(sub1[,k])/sqrt(dim(sub1)[1])
  }
  polygon(c(0:45,45:0),c((1-y)+se,rev((1-y)-se)),col = colours_a[i],border = NA)
  
  lines(0:45,1-y ,col = colours[i],lwd=3)
  
  subratings = subset(ratings,ratings$Win_Prob==cond_float[i])
  xs = c(0,5,20,45)
  rates = rep(NA,4);se_rates = rep(NA,4)
  for (j in 1:4){
    rates[j] = mean(subratings[subratings$Index==j,6])
    se_rates[j] = sd(subratings[subratings$Index==j,6])/sqrt(dim(subratings[subratings$Index==j,])[1])
    segments(xs[j],(rates[j]+se_rates[j]+1)/2,xs[j],(rates[j]-se_rates[j]+1)/2,lwd=2,lty=1,col = colours[i])
  }
  points(xs,(rates+1)/2,pch=16,col= colours[i])
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("bottomleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.7)

```

We seem to have a quite strong bias towards positive value notation.

# Fitting the Learning Rate $$\alpha$$

Let's try with one participant: *pat_02495_0949*

```{r}

pat_files = list.files(path="TrialbyTrial/",pattern = "PostSpikes")
pat = read.table(file=paste0("TrialbyTrial/",pat_files[1]),sep=",",header=T)
pat_name = paste(strsplit(pat_name,split="_")[[1]][2:4],collapse = "_")

print(paste0("Patient: ",pat_files[1]," did ",dim(pat)[1], " trials which correspond to ",dim(pat)[1]/45," blocks."))#Sanity check this should be an integer

pat$Trial = ifelse(pat$Trial>45,pat$Trial-45,pat$Trial) #Correction of data collection 
```

Fetch his ratings

```{r}
rating_sub = subset(ratings,ratings$ID==pat_name)
V_init = (rating_sub$Rating[rating_sub$Index==1]+220)/440 #Normalised

compute_error <- function(alpha, R, V_init, rating_ssub, decay= c(1,1,1,1)){
  V = numeric(45)
  V[1] = V_init
  for(t in 1:45){
    v = RL(v,R[t],alpha)
    V[t] = v 
  }

  #Computing the error
  SE = sum(((decay*(rating_ssub$Rating+220)/440-(1-V[c(1,5,20,45)])))^2)
  
  return(SE)
}


alphas = numeric(6)
for (i in 1:6){
  #RL
  v = V_init[i]
  sub = pat[((i-1)*45+1):((i-1)*45+45),]
  R = sub$WinLose
  
  #Ratings
  rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
  
  
  # Optimization process
  result <- optim(par = 0.2,  # alpha
                  fn = compute_error,  
                  R = R,  # Additional parameters
                  V_init = v,
                  rating_ssub = rating_ssub,
                  decay = c(1:4/10),
                  method = "L-BFGS-B", 
                  lower = 0,  
                  upper = 1)  
  
  print(i)
  print(result$par)
  
  alphas[i] = result$par
}
```

Now the loop

```{r}

V = matrix(NA,45,dim(pat)[1]/45)
conditions = matrix(NA,2,dim(pat)[1]/45)

for (i in 1:(dim(pat)[1]/45)){
  v = V_init[i]
  sub = pat[((i-1)*45+1):((i-1)*45+45),]
  R = sub$WinLose
  for(t in 1:45){
    v = RL(v,R[t],alphas[i])
    V[t,i] = v 
  }
  #Here it should be only one everytime but as sanity check I'll put unique()
  conditions[1,i] = unique(sub$WinProb)
  conditions[2,i] = unique(sub$Condition)
}

V = rbind(V_init,V)


colours = c("#1f77b4","#ff7f0e","#2ca02c")
cond = ifelse(conditions[1,]=="low",1,ifelse(conditions[1,]=="med",2,3))

plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL fitted block by block",ylab = "Oponent Value",xlab="Trials")

for (i in 1:ncol(V)) {
  lines(0:45, 1-V[,i],col = colours[cond[i]],lwd=3)
}
for (i in 1:ncol(V)) {
  #Ratings
  rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
  points(c(1,5,20,45),(rating_ssub$Rating+220)/440,col=colours[cond[i]],pch=16)
}


abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)


```

We should try with one alpha per participant could be slightly better
